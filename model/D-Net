import torch
from torch import nn, einsum
from collections import OrderedDict
from model.nets import MAPC, T_Mamba
import torch.nn.functional as F
from thop import profile
from model.nets.AC_Conv import *




class D_Net(nn.Module):
    def __init__(self, in_dim, nclass_pre, nclass_post):
        super(D_Net, self).__init__()
        self.in_dim = in_dim
        self.dim = [64, 128, 64]

        self.ac_conv_1 = AC_Conv_down(self.in_dim, self.dim[0])
        self.ac_conv_2 = AC_Conv_down(self.dim[0], self.dim[1])
        self.ac_conv_3 = AC_Conv_up(self.dim[1], self.dim[2])

        self.ac_conv_pre = AC_Conv_up(self.dim[2], nclass_pre)
        self.ac_conv_post = AC_Conv_up(self.dim[2], nclass_post)

    def forward(self, change):

        pre, post = self.ac_conv_1(change)

        pre_i, pre_j = self.ac_conv_2(pre)
        post_i, post_j = self.ac_conv_2(post)

        pre = pre_i
        post = post_j

        pre_i, pre_j = self.ac_conv_3(pre)
        post_i, post_j = self.ac_conv_3(post)

        pre = pre_i
        post = post_j

        pre_i, pre_j = self.ac_conv_pre(pre)
        post_i, post_j = self.ac_conv_post(post)

        pre = pre_i
        post = post_j

        return pre, post


if __name__ == '__main__':
     change = torch.randn(1, 1, 256, 256)
     model = D_Net(in_dim=1, nclass_pre=3, nclass_post=1)
     pre, post = model(change)
     print(pre.shape, post.shape)  # 打印模型输出的形状
     flops, params = profile(model, (change,))
     print('flops: %.2f GFLOPS, params: %.2f M' % (flops / 1000000000.0, params / 1000000.0))
